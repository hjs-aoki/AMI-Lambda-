import boto3
import collections
import datetime
import time
import sys

ec = boto3.client('ec2', 'ap-northeast-1') #利用必要なリージョンの登録(例: ap-northeast-1)
ec2 = boto3.resource('ec2', 'ap-northeast-1')#利用必要なリージョンの登録(例: ap-northeast-1)
images = ec2.images.filter(Owners=["self"])

def lambda_handler(event, context):

	#「キー:Env、値:Backup」のEC2インスタンスのフィルター
    reservations = ec.describe_instances(
        Filters=[
            {'Name': 'tag:Evn', 'Values': ['Backup']},
        ]
    ).get(
        'Reservations', []
    )

    instances = sum(
        [
            [i for i in r['Instances']]
            for r in reservations
        ], [])

    print "Found %d instances that need evaluated" % len(instances)

    to_tag = collections.defaultdict(list)

    date = datetime.datetime.now()
    date_fmt = date.strftime('%Y%m%d')

    imagesList = []

    backupSuccess = False
	
	#「Backup」タグ名を付けているEC2インスタンスの検索を繰り返す
    for instance in instances:
	imagecount = 0

        for image in images:
			#自動作成されたAMI名をチェックする
            if image.name.startswith('AMI-' + instance['InstanceId']):

	        imagecount = imagecount + 1

                try:
                    if image.tags is not None:
                        deletion_date = [
                            t.get('Value') for t in image.tags
                            if t['Key'] == 'DeleteOn'][0]
                        delete_date = time.strptime(deletion_date, "%m%d%Y")
                except IndexError:
                    deletion_date = False
                    delete_date = False

                today_time = datetime.datetime.now().strftime('%m%d%Y')
                today_date = time.strptime(today_time, '%m%d%Y')

				#AMIの作成日をチェックし、現在日付以前の場合は削除対象にする	
                if delete_date <= today_date:
                    imagesList.append(image.id)

				#「createAmi」のLambda関数で作成された最新AMIの通知をチェック・印刷する
                if image.name.endswith(date_fmt):
                    backupSuccess = True
                    print "Latest backup from " + date_fmt + " was a success"

        print "instance " + instance['InstanceId'] + " has " + str(imagecount) + " AMIs"

    print "About to process the following AMIs:"
	
	#削除必要なAMIのID情報の印刷
    print imagesList 

    if backupSuccess == True:
	
		#各AMIの登録を解除する
        for image in imagesList:
            print "deregistering image %s" % image
            amiResponse = ec.deregister_image(
                DryRun=False,
                ImageId=image,
            )

    else:
        print "No current backup found. Termination suspended."